{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport noteService from './noteService';\nconst initialState = {\n  notes: [],\n  note: {},\n  isSuccess: false,\n  isError: false,\n  isLoading: false,\n  message: ''\n};\nexport const getNotes = createAsyncThunk('note/getAll', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.getNotes(ticketId, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue('Failed');\n  }\n});\nexport const addNote = createAsyncThunk('note/add', async (_ref, thunkAPI) => {\n  let {\n    ticketId,\n    note\n  } = _ref;\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.addNote(ticketId, note, token);\n  } catch (error) {\n    return thunkAPI.rejectWithValue('Failed');\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.fulfilled, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.rejected, state => {\n      state.isLoading = true;\n    }).addCase(addNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(addNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.notes = action.payload;\n    }).addCase(addNote.rejected, state => {\n      state.isLoading = false;\n      state.notes = null;\n      state.isError = true;\n      state.message = 'failed';\n    });\n  }\n});\nexport default noteSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","noteService","initialState","notes","note","isSuccess","isError","isLoading","message","getNotes","ticketId","thunkAPI","token","getState","auth","user","error","rejectWithValue","addNote","_ref","noteSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","rejected","action","payload","reducer"],"sources":["C:/Users/jin/Documents/GitHub/web-mobile/React/test-ticket/front/src/features/notes/noteSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport noteService from './noteService'\r\n\r\nconst initialState = {\r\n  notes: [],\r\n  note: {},\r\n  isSuccess: false,\r\n  isError: false,\r\n  isLoading: false,\r\n  message: ''\r\n}\r\n\r\nexport const getNotes = createAsyncThunk(\r\n  'note/getAll',\r\n  async (ticketId, thunkAPI) => {    \r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await noteService.getNotes(ticketId, token)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue('Failed')\r\n    }\r\n  }\r\n)\r\n\r\nexport const addNote = createAsyncThunk(\r\n  'note/add',\r\n  async ({ticketId, note}, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await noteService.addNote(ticketId, note, token)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue('Failed')\r\n    }\r\n  }\r\n)\r\n\r\nexport const noteSlice = createSlice({\r\n  name: 'note',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getNotes.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getNotes.fulfilled, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getNotes.rejected, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(addNote.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(addNote.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.notes = action.payload\r\n      })\r\n      .addCase(addNote.rejected, (state) => {\r\n        state.isLoading = false\r\n        state.notes = null\r\n        state.isError = true\r\n        state.message = 'failed'\r\n      })\r\n  }\r\n})\r\n\r\nexport default noteSlice.reducer\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,CAAC,CAAC;EACRC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGT,gBAAgB,CACtC,aAAa,EACb,OAAOU,QAAQ,EAAEC,QAAQ,KAAK;EAC5B,IAAI;IACF,MAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK;IACjD,OAAO,MAAMX,WAAW,CAACQ,QAAQ,CAACC,QAAQ,EAAEE,KAAK,CAAC;EACpD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAAC,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC;AAED,OAAO,MAAMC,OAAO,GAAGlB,gBAAgB,CACrC,UAAU,EACV,OAAAmB,IAAA,EAAyBR,QAAQ,KAAK;EAAA,IAA/B;IAACD,QAAQ;IAAEN;EAAI,CAAC,GAAAe,IAAA;EACrB,IAAI;IACF,MAAMP,KAAK,GAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK;IACjD,OAAO,MAAMX,WAAW,CAACiB,OAAO,CAACR,QAAQ,EAAEN,IAAI,EAAEQ,KAAK,CAAC;EACzD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAAC,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC;AAED,OAAO,MAAMG,SAAS,GAAGrB,WAAW,CAAC;EACnCsB,IAAI,EAAE,MAAM;EACZnB,YAAY;EACZoB,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAKtB;EACpB,CAAC;EACDuB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,QAAQ,CAACmB,OAAO,EAAGJ,KAAK,IAAK;MACpCA,KAAK,CAACjB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDoB,OAAO,CAAClB,QAAQ,CAACoB,SAAS,EAAGL,KAAK,IAAK;MACtCA,KAAK,CAACjB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDoB,OAAO,CAAClB,QAAQ,CAACqB,QAAQ,EAAGN,KAAK,IAAK;MACrCA,KAAK,CAACjB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDoB,OAAO,CAACT,OAAO,CAACU,OAAO,EAAGJ,KAAK,IAAK;MACnCA,KAAK,CAACjB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDoB,OAAO,CAACT,OAAO,CAACW,SAAS,EAAE,CAACL,KAAK,EAAEO,MAAM,KAAK;MAC7CP,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAACrB,KAAK,GAAG4B,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACT,OAAO,CAACY,QAAQ,EAAGN,KAAK,IAAK;MACpCA,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAACrB,KAAK,GAAG,IAAI;MAClBqB,KAAK,CAAClB,OAAO,GAAG,IAAI;MACpBkB,KAAK,CAAChB,OAAO,GAAG,QAAQ;IAC1B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeY,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}